{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timer, setTimer] = useState(null);\n\n  // function will be called on each card\n  // input value will set count +1 if correct\n  function inputValueChanged(e, front) {\n    if (e.target.value === front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n\n  // text synthesis function\n  function textSynthesis(flashcardfront) {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(flashcardfront);\n    synth.speak(utterance);\n  }\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // define this function inside GameComponent\n    function handleTextSynthesis() {\n      // clear any previous timer\n      if (timer) {\n        clearTimeout(timer);\n      }\n      // set new timer\n      setTimer(setTimeout(() => {\n        textSynthesis(flashcard.front);\n      }, 500));\n    }\n    if (count === 0) {\n      // display the front side of the card, and require user to type the back side correctly to move on\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e, flashcard.oneback),\n          type: \"text\",\n          value: input,\n          autofill: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    } else if (count === 1) {\n      // display the front side of the card and speak it out loud\n      handleTextSynthesis();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTextSynthesis,\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }\n    // display the back side of the card, and allow user to hear the pronunciation by clicking on a button\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTextSynthesis,\n        children: \"Hear it again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: selectedSet[index].flashcard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"t848Mo9AVXH2z/7E/v01K1nmqd0=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","index","setIndex","timer","setTimer","inputValueChanged","e","front","target","value","textSynthesis","flashcardfront","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","GameComponent","_ref2","flashcard","handleTextSynthesis","clearTimeout","setTimeout","children","oneback","onChange","type","autofill","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["import {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  \n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [timer, setTimer] = useState(null)\n  \n  // function will be called on each card\n  // input value will set count +1 if correct\n  function inputValueChanged(e, front) {\n    if (e.target.value === front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  \n  // text synthesis function\n  function textSynthesis(flashcardfront) {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(flashcardfront);\n    synth.speak(utterance);\n  }\n  \n  const GameComponent = ({flashcard}) => {\n    // define this function inside GameComponent\n    function handleTextSynthesis() {\n      // clear any previous timer\n      if (timer) {\n        clearTimeout(timer);\n      }\n      // set new timer\n      setTimer(setTimeout(() => {\n        textSynthesis(flashcard.front)\n      }, 500));\n    }\n    \n    if (count === 0) {\n      // display the front side of the card, and require user to type the back side correctly to move on\n      return (\n        <div>\n          {flashcard.front}\n          {flashcard.oneback}\n          <input onChange={(e) => inputValueChanged(e, flashcard.oneback)} type=\"text\" value={input} autofill/>\n        </div>\n      );\n    }\n    else if (count === 1) {\n      // display the front side of the card and speak it out loud\n      handleTextSynthesis();\n      return (\n        <div>\n          {flashcard.front}\n          {flashcard.oneback}\n          <button onClick={handleTextSynthesis}>Again</button>\n        </div>\n      );\n    }\n    // display the back side of the card, and allow user to hear the pronunciation by clicking on a button\n    return (\n      <div>\n        {flashcard.oneback}\n        <button onClick={handleTextSynthesis}>Hear it again</button>\n      </div>\n    );\n  }\n  \n  return (\n    <div>\n      <div key={index}>\n        <GameComponent flashcard={selectedSet[index].flashcard}/>\n      </div>\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}