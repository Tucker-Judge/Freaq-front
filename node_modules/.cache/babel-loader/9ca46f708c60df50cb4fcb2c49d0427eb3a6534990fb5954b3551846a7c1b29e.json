{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timerStart, setTimerStart] = useState(0);\n  const [timerMiddle, setTimerMiddle] = useState(0);\n  const [timerEnd, setTimerEnd] = useState(0);\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n  // input value will set count +1 if correct\n\n  function inputValueChanged(e) {\n    e.preventDefault();\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  // text synthesis function\n  function textSynthesis() {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n    utterance.lang = \"de-DE\";\n    synth.speak(utterance);\n    // console.log(utterance)\n  }\n  // handle textSynthesis with timers\n  // function handleTextSynthesis(front, e) {\n  //   //half a second delay\n  //   // if its clicked reset it\n  //   // set timeout 3000\n\n  //   // I want to timer \n  //   if (timer) {\n  //     clearTimeout(timer);\n  //   }\n  // setTimer(setTimeout(() => {\n  //     textSynthesis(front)\n  //   }, 500));\n\n  //     setTimer(setTimeout(() => {\n  //       textSynthesis(front)\n\n  //     }, 3000));\n\n  //     const t = setTimer(setTimeout(() => {\n  //       setCount(count + 1);\n  //     }, 3000));\n  //     t\n  //   }\n\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.one_back, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    } else if (count === 1) {\n      // if speaking then do nothing\n      // if parameter is passed then run only the last timer that does not reput\n      // I want to have the card front displayed and it will be spoken to the user\n      //after half a second run the code\n      displayContent = [flashcard.front, flashcard.front, setCount(count + 1)];\n      const arr = [500, 3000, 5000];\n      setTimeout(displayContent, timeIntervals[arr]);\n      textSynthesis();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.one_back\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this);\n    }\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: selectedSet[index].flashcard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 3\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"6DrjSni9pPABucFYDINlD/mzyag=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","index","setIndex","timerStart","setTimerStart","timerMiddle","setTimerMiddle","timerEnd","setTimerEnd","inputValueChanged","e","preventDefault","target","value","flashcard","front","textSynthesis","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","lang","speak","GameComponent","_ref2","children","one_back","onChange","type","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","displayContent","arr","setTimeout","timeIntervals","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  \n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [timerStart, setTimerStart] = useState(0)\n  const [timerMiddle, setTimerMiddle] = useState(0)\n  const [timerEnd, setTimerEnd] = useState(0)\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n// input value will set count +1 if correct\n\n\n  function inputValueChanged(e) {\n    e.preventDefault()\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n// text synthesis function\nfunction textSynthesis(){\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n  utterance.lang = \"de-DE\"\n  synth.speak(utterance);\n  // console.log(utterance)\n  \n}\n// handle textSynthesis with timers\n// function handleTextSynthesis(front, e) {\n//   //half a second delay\n//   // if its clicked reset it\n//   // set timeout 3000\n\n//   // I want to timer \n//   if (timer) {\n//     clearTimeout(timer);\n//   }\n// setTimer(setTimeout(() => {\n//     textSynthesis(front)\n//   }, 500));\n  \n \n//     setTimer(setTimeout(() => {\n//       textSynthesis(front)\n      \n//     }, 3000));\n\n//     const t = setTimer(setTimeout(() => {\n//       setCount(count + 1);\n//     }, 3000));\n//     t\n//   }\n\n  \n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.one_back}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input} autoFocus/>\n      </div>\n    )\n    \n  }\n  else if (count === 1) {\n// if speaking then do nothing\n// if parameter is passed then run only the last timer that does not reput\n    // I want to have the card front displayed and it will be spoken to the user\n    //after half a second run the code\n    displayContent = [flashcard.front, flashcard.front, setCount(count+1)]\n   const arr = [500, 3000, 5000]\n    setTimeout(displayContent, timeIntervals[arr])\n    textSynthesis()\n    return (\n      <div>\n        <p>\n\n        {flashcard.front}\n        </p>\n        <p>\n        {flashcard.one_back}\n        </p>\n        {/* <button onClick = {textSynthesis(flashcard.front)}>Again</button> */}\n      </div>\n    )\n    }\n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n           \n  <div key={index}>\n{ <GameComponent flashcard = {selectedSet[index].flashcard}/>}\n \n  </div>\n\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":";;AACA,SAAQA,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,YAAYA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAEnC,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C;EACA;EACF;;EAGE,SAASmB,iBAAiBA,CAACC,CAAC,EAAE;IAC5BA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAID,CAAC,CAACE,MAAM,CAACC,KAAK,KAAKjB,WAAW,CAACK,KAAK,CAAC,CAACa,SAAS,CAACC,KAAK,EAAE;MACzDf,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACnBD,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,MAAM;MACLA,QAAQ,CAACY,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;IAC1B;EACF;EACF;EACA,SAASG,aAAaA,CAAA,EAAE;IACtB,MAAMC,KAAK,GAAGC,MAAM,CAACC,eAAe;IACpC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACzB,WAAW,CAACK,KAAK,CAAC,CAACa,SAAS,CAACC,KAAK,CAAC;IAClFK,SAAS,CAACE,IAAI,GAAG,OAAO;IACxBL,KAAK,CAACM,KAAK,CAACH,SAAS,CAAC;IACtB;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAGE,MAAMI,aAAa,GAAGC,KAAA,IAAiB;IAAA,IAAhB;MAACX;IAAS,CAAC,GAAAW,KAAA;IAClC;IACA;;IAIE,IAAI1B,KAAK,KAAK,CAAC,EAAC;MACpB;MACA;MACI,oBACEP,OAAA;QAAAkC,QAAA,GACCZ,SAAS,CAACC,KAAK,EACfD,SAAS,CAACa,QAAQ,eACnBnC,OAAA;UAAOoC,QAAQ,EAAKlB,CAAC,IAAKD,iBAAiB,CAACC,CAAC,CAAE;UAACmB,IAAI,EAAC,MAAM;UAAChB,KAAK,EAAIhB,KAAM;UAACiC,SAAS;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjF;IAGV,CAAC,MACI,IAAInC,KAAK,KAAK,CAAC,EAAE;MACxB;MACA;MACI;MACA;MACAoC,cAAc,GAAG,CAACrB,SAAS,CAACC,KAAK,EAAED,SAAS,CAACC,KAAK,EAAEf,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC,CAAC;MACvE,MAAMqC,GAAG,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;MAC5BC,UAAU,CAACF,cAAc,EAAEG,aAAa,CAACF,GAAG,CAAC,CAAC;MAC9CpB,aAAa,EAAE;MACf,oBACExB,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,EAECZ,SAAS,CAACC;QAAK;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACZ,eACJ1C,OAAA;UAAAkC,QAAA,EACCZ,SAAS,CAACa;QAAQ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEA;IAER;IACA;;IAEA;IACJ;EAEE,CAAC;EACD;EACA;;EAEA;;EAEA,oBACE1C,OAAA;IAAAkC,QAAA,eAEFlC,OAAA;MAAAkC,QAAA,eACAlC,OAAA,CAACgC,aAAa;QAACV,SAAS,EAAIlB,WAAW,CAACK,KAAK,CAAC,CAACa;MAAU;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE,GADjDjC,KAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAGT;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEE;AAGV;AAACvC,EAAA,CAxHQF,YAAY;AAAA8C,EAAA,GAAZ9C,YAAY;AA0HrB,eAAeA,YAAY;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}