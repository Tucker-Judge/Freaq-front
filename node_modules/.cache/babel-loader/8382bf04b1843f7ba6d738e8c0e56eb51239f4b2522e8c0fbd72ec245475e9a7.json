{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  console.log(selectedSet);\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    // function will be called on each card\n\n    function inputValueChanged(e, flashcard) {\n      if (input === flashcard) {\n        return setCount(count + 1);\n      }\n      console.log();\n      setInput(e.target.value);\n    }\n    function textSynthesis(flashcardfront) {\n      const synth = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(flashcardfront);\n      synth.speak(utterance);\n      // console.log(utterance)\n    }\n\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e, flashcard.front),\n          type: \"text\",\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this);\n    } else if (count = 1) {\n      // I want to have the card front displayed and it will be spoken to the user\n      textSynthesis(flashcard.front);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textSynthesis(flashcard.front),\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this);\n    }\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Array.isArray(selectedSet) && selectedSet.flashcard.map(flashCard => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: count === 0 && /*#__PURE__*/_jsxDEV(GameComponent, {\n          flashcard: flashCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 18\n        }, this)\n      }, flashCard.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 3\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"Mk423h3OarbyGSPk7xyQ8Z2ZryE=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","console","log","GameComponent","_ref2","flashcard","inputValueChanged","e","target","value","textSynthesis","flashcardfront","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","children","front","oneback","onChange","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Array","isArray","map","flashCard","id","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  console.log(selectedSet)\n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\n\nfunction inputValueChanged(e, flashcard){\n  if (input === flashcard) {\n    return setCount(count + 1)\n  }\n  console.log()\n  setInput(e.target.value)\n}\n\nfunction textSynthesis(flashcardfront){\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(flashcardfront);\n  synth.speak(utterance);\n  // console.log(utterance)\n  \n}\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.oneback}\n      <input onChange = {(e) => inputValueChanged(e, flashcard.front)} type=\"text\" value = {input}/>\n      </div>\n    )\n    \n  }\n  else if (count = 1) {\n    // I want to have the card front displayed and it will be spoken to the user\n    textSynthesis(flashcard.front)\n    \n    return (\n      <div>\n        {flashcard.front}\n        {flashcard.oneback}\n        <button onClick = {textSynthesis(flashcard.front)}>Again</button>\n      </div>\n    )\n    }\n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n      {Array.isArray(selectedSet) && selectedSet.flashcard.map((flashCard) => {\n\n            return (\n\n\n  <div key={flashCard.id}>\n{ count === 0 && <GameComponent flashcard = {flashCard}/>}\n  {/* Add more elements to render additional data */}\n  </div>\n\n  )\n        \n})}\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}