{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timerStart, setTimerStart] = useState(6);\n\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n  // input value will set count +1 if correct\n\n  function inputValueChanged(e) {\n    e.preventDefault();\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  // text synthesis function\n  function textSynthesis() {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n    utterance.lang = \"de-DE\";\n\n    // Add event listener to stop speaking after one pass\n    utterance.addEventListener(\"end\", () => {\n      synth.cancel();\n    });\n    synth.speak(utterance);\n  }\n  textSynthesis();\n\n  // handle textSynthesis with timers\n  // function handleTextSynthesis(front, e) {\n  //   //half a second delay\n  //   // if its clicked reset it\n  //   // set timeout 3000\n\n  //   // I want to timer \n  //   if (timer) {\n  //     clearTimeout(timer);\n  //   }\n  // setTimer(setTimeout(() => {\n  //     textSynthesis(front)\n  //   }, 500));\n\n  //     setTimer(setTimeout(() => {\n  //       textSynthesis(front)\n\n  //     }, 3000));\n\n  //     const t = setTimer(setTimeout(() => {\n  //       setCount(count + 1);\n  //     }, 3000));\n  //     t\n  //   }\n\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.one_back, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this);\n    } else if (count === 1) {\n      // if speaking then do nothing\n      // if parameter is passed then run only the last timer that does not repeat\n      // I want to have the card front displayed and it will be spoken to the user\n      // after half a second run the code\n      const interval = setInterval(() => {\n        setTimerStart(timerStart - 1);\n        if (timerStart === 3) {\n          textSynthesis();\n        } else if (timerStart === 0) {\n          textSynthesis();\n        }\n      }, 1000);\n      if (timerStart === 0) {\n        clearInterval(interval);\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.one_back\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this);\n    }\n\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: selectedSet[index].flashcard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 3\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"z2z5dxakQKLok0ceGn7VyUqnuzM=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","index","setIndex","timerStart","setTimerStart","inputValueChanged","e","preventDefault","target","value","flashcard","front","textSynthesis","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","lang","addEventListener","cancel","speak","GameComponent","_ref2","children","one_back","onChange","type","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","interval","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  \n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [timerStart, setTimerStart] = useState(6)\n\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n// input value will set count +1 if correct\n\n\n  function inputValueChanged(e) {\n    e.preventDefault()\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n// text synthesis function\nfunction textSynthesis() {\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n  utterance.lang = \"de-DE\"\n\n  // Add event listener to stop speaking after one pass\n  utterance.addEventListener(\"end\", () => {\n    synth.cancel();\n  });\n\n  synth.speak(utterance);\n}\ntextSynthesis()\n\n// handle textSynthesis with timers\n// function handleTextSynthesis(front, e) {\n//   //half a second delay\n//   // if its clicked reset it\n//   // set timeout 3000\n\n//   // I want to timer \n//   if (timer) {\n//     clearTimeout(timer);\n//   }\n// setTimer(setTimeout(() => {\n//     textSynthesis(front)\n//   }, 500));\n  \n \n//     setTimer(setTimeout(() => {\n//       textSynthesis(front)\n      \n//     }, 3000));\n\n//     const t = setTimer(setTimeout(() => {\n//       setCount(count + 1);\n//     }, 3000));\n//     t\n//   }\n\n  \n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.one_back}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input} autoFocus/>\n      </div>\n    )\n    \n  }\n  else if (count === 1) {\n \n    // if speaking then do nothing\n    // if parameter is passed then run only the last timer that does not repeat\n    // I want to have the card front displayed and it will be spoken to the user\n    // after half a second run the code\n   const interval = setInterval(() => {\n    setTimerStart(timerStart - 1)\n\n      if (timerStart === 3) {\n       textSynthesis()\n      }\n      else if(timerStart === 0){\n       textSynthesis()\n      }\n      }, 1000);\n\n          if(timerStart === 0){\n            clearInterval(interval)\n          }\n \n    return (\n      <div>\n        <p>{flashcard.front}</p>\n        <p>{flashcard.one_back}</p>\n        {/* <button onClick={() => textSynthesis(flashcard.front)}>Again</button> */}\n      </div>\n    );\n  }\n  \n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n           \n  <div key={index}>\n{ <GameComponent flashcard = {selectedSet[index].flashcard}/>}\n \n  </div>\n\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}