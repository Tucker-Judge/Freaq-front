{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet,\n    languageApp,\n    user\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timerStart, setTimerStart] = useState(10);\n  const [timerEnd, setTimerEnd] = useState(0);\n  const [speechInput, setSpeechInput] = useState(\"\");\n  var SpeechRecognition = SpeechRecognition;\n  var SpeechGrammarList = SpeechGrammarList;\n  var SpeechRecognitionEvent = SpeechRecognitionEvent;\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n  // input value will set count +1 if correct\n\n  function inputValueChanged(e) {\n    e.preventDefault();\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  useEffect(() => {\n    if (count === 1) {\n      textSynthesis();\n    } else if (count === 2) {\n      speechSynthesis();\n    }\n  });\n  // text synthesis function\n  function textSynthesis() {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n    utterance.lang = user.lang_code;\n    utterance.addEventListener(\"end\", () => {\n      synth.cancel();\n    });\n    let interval = setInterval(() => {\n      setTimerStart(prevTimerStart => {\n        const newTimerStart = prevTimerStart - 1;\n        if (newTimerStart === 3 || newTimerStart === 8) {\n          synth.speak(utterance);\n        }\n        if (newTimerStart <= 0) {\n          clearInterval(interval);\n        }\n        return newTimerStart;\n      });\n    }, 2000);\n  }\n  function speechSynthesis() {\n    const recognition = new SpeechRecognition();\n    recognition.lang = user.lang_code;\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n    recognition.start();\n    recognition.onresult = function (event) {\n      const speechResult = event.results[0][0].transcript.trim();\n      setSpeechInput(speechResult);\n      if (speechResult === selectedSet[index].flashcard.front) {\n        setCount(count + 1);\n        setSpeechInput('');\n        recognition.stop();\n      }\n    };\n  }\n  // textSynthesis()\n  // let interval\n  // function startTimer() {\n  //   console.log(\"funky\")\n  //    interval = setInterval(() => {\n  //     setTimerStart(timerStart - 1);\n  //    if (timerStart === 0) {\n  //       setTimerStart(10)\n  //       setTimerEnd(timerEnd + 1)\n  //     }\n  //     else if (timerStart === 2) {\n  //       textSynthesis();\n  //     }\n  //     else if (timerStart === 7) {\n  //       textSynthesis();\n  //     } \n  //   }, 1000);\n  // }\n\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.one_back, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this);\n    } else if (count === 1) {\n      textSynthesis();\n      setCount(count + 1);\n      // if speaking then do nothing\n      // if parameter is passed then run only the last timer that does not repeat\n      // I want to have the card front displayed and it will be spoken to the user\n      // after half a second run the code\n      //  const interval = setInterval(() => {\n      //   setTimerStart(timerStart - 1)\n\n      //     if (timerStart === 3) {\n      //      textSynthesis()\n      //     }\n      //     else if(timerStart === 0){\n      //      textSynthesis()\n      //     }\n      //     if(timerStart === 0){\n      //       clearInterval(interval)\n      //     }\n      //     }, 1000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.one_back\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this);\n    } else if (count == 2) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Repeat the front of the card:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this);\n    }\n\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: selectedSet[index].flashcard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 3\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"gJVCWyaGd+8f/JxVDYBa/8mfns0=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","languageApp","user","input","setInput","count","setCount","index","setIndex","timerStart","setTimerStart","timerEnd","setTimerEnd","speechInput","setSpeechInput","SpeechRecognition","SpeechGrammarList","SpeechRecognitionEvent","inputValueChanged","e","preventDefault","target","value","flashcard","front","textSynthesis","speechSynthesis","synth","window","utterance","SpeechSynthesisUtterance","lang","lang_code","addEventListener","cancel","interval","setInterval","prevTimerStart","newTimerStart","speak","clearInterval","recognition","interimResults","maxAlternatives","start","onresult","event","speechResult","results","transcript","trim","stop","GameComponent","_ref2","children","one_back","onChange","type","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState, useEffect} from 'react'\n\nfunction FlashcardSet({ selectedSet, languageApp, user }) {\n \n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [timerStart, setTimerStart] = useState(10)\n  const [timerEnd, setTimerEnd] = useState(0)\n  const [speechInput, setSpeechInput] = useState(\"\")\n\n \n  var SpeechRecognition = SpeechRecognition \nvar SpeechGrammarList = SpeechGrammarList \nvar SpeechRecognitionEvent = SpeechRecognitionEvent \n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n// input value will set count +1 if correct\n\n\n  function inputValueChanged(e) {\n    e.preventDefault()\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  useEffect(() => {\n    if (count === 1) {\n      textSynthesis()\n    }\n    else if (count === 2) {\n      speechSynthesis()\n    }\n  },)\n// text synthesis function\nfunction textSynthesis() {\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n  utterance.lang = user.lang_code\n  utterance.addEventListener(\"end\", () => {\n    synth.cancel();\n  });\n\n  let interval = setInterval(() => {\n    setTimerStart((prevTimerStart) => {\n      const newTimerStart = prevTimerStart - 1;\n\n      if (newTimerStart === 3 || newTimerStart === 8) {\n        synth.speak(utterance);\n      }\n\n      if (newTimerStart <= 0) {\n        clearInterval(interval);\n      }\n\n      return newTimerStart;\n\n    });\n  }, 2000);\n\n}\nfunction speechSynthesis(){\n  const recognition = new SpeechRecognition();\n      recognition.lang = user.lang_code;\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.start();\n    \n      recognition.onresult = function(event) {\n        const speechResult = event.results[0][0].transcript.trim();\n        setSpeechInput(speechResult);\n        if (speechResult === selectedSet[index].flashcard.front) {\n          setCount(count + 1);\n          setSpeechInput('');\n          recognition.stop();\n        }\n      }\n}\n// textSynthesis()\n// let interval\n// function startTimer() {\n//   console.log(\"funky\")\n//    interval = setInterval(() => {\n//     setTimerStart(timerStart - 1);\n//    if (timerStart === 0) {\n//       setTimerStart(10)\n//       setTimerEnd(timerEnd + 1)\n//     }\n//     else if (timerStart === 2) {\n//       textSynthesis();\n//     }\n//     else if (timerStart === 7) {\n//       textSynthesis();\n//     } \n//   }, 1000);\n// }\n\n\n  \n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.one_back}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input} autoFocus/>\n      </div>\n    )\n    \n  }\n  else if (count === 1) {\n    textSynthesis()\n    setCount(count+1)\n    // if speaking then do nothing\n    // if parameter is passed then run only the last timer that does not repeat\n    // I want to have the card front displayed and it will be spoken to the user\n    // after half a second run the code\n  //  const interval = setInterval(() => {\n  //   setTimerStart(timerStart - 1)\n\n  //     if (timerStart === 3) {\n  //      textSynthesis()\n  //     }\n  //     else if(timerStart === 0){\n  //      textSynthesis()\n  //     }\n  //     if(timerStart === 0){\n  //       clearInterval(interval)\n  //     }\n  //     }, 1000);\n    return (\n      <div>\n        <p>{flashcard.front }</p>\n        <p>{flashcard.one_back}</p>\n        {/* <button onClick={() => textSynthesis(flashcard.front)}>Again</button> */}\n      </div>\n    );\n  }\n  else if (count == 2) {\n    \n      return (\n        <div>\n          <p>Repeat the front of the card:</p>\n          <p>{flashcard.front}</p>\n        </div>\n      );\n    }\n  \n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n           \n  <div key={index}>\n{ <GameComponent flashcard = {selectedSet[index].flashcard }/>}\n \n  </div>\n\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}