{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  function inputValueChanged(e) {\n    if (input === flashcard.front) {\n      return setCount(count + 1);\n    }\n    setInput(e.target.value);\n  }\n  function textSynthesis() {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(flashcard.front);\n    synth.speak(utterance);\n  }\n  const GameComponent = flashcard => {\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this);\n    } else if (count = 1) {\n      // I want to have the card front displayed and it will be spoken to the user\n      textSynthesis(flashcard.front);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textSynthesis,\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this);\n    }\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedSet.map(flashCard => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: flashCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, flashCard.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"Mk423h3OarbyGSPk7xyQ8Z2ZryE=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","inputValueChanged","e","flashcard","front","target","value","textSynthesis","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","GameComponent","children","oneback","onChange","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","flashCard","id","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["import React from 'react';\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\nconst [input, setInput] = useState(\"\")\nconst [count, setCount] = useState(0)\n\nfunction inputValueChanged(e){\n  if (input === flashcard.front) {\n    return setCount(count + 1)\n  }\n  setInput(e.target.value)\n}\n\nfunction textSynthesis(){\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(flashcard.front);\n  synth.speak(utterance);\n  \n}\n    const GameComponent = (flashcard) => {\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.oneback}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input}/>\n      </div>\n    )\n    \n  }\n  else if (count = 1) {\n    // I want to have the card front displayed and it will be spoken to the user\n    textSynthesis(flashcard.front)\n    \n    return (\n      <div>\n        {flashcard.front}\n        {flashcard.oneback}\n        <button onClick = {textSynthesis}>Again</button>\n      </div>\n    )\n    }\n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n      {selectedSet.map((flashCard) => (\n        <div key={flashCard.id}>\n          <GameComponent flashcard = {flashCard} />\n          {/* Add more elements to render additional data */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FlashcardSet;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,YAAYA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EACnC;EACA;;EAEA;EACF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAErC,SAASW,iBAAiBA,CAACC,CAAC,EAAC;IAC3B,IAAIL,KAAK,KAAKM,SAAS,CAACC,KAAK,EAAE;MAC7B,OAAOJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IAC5B;IACAD,QAAQ,CAACI,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;EAC1B;EAEA,SAASC,aAAaA,CAAA,EAAE;IACtB,MAAMC,KAAK,GAAGC,MAAM,CAACC,eAAe;IACpC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACT,SAAS,CAACC,KAAK,CAAC;IAC/DI,KAAK,CAACK,KAAK,CAACF,SAAS,CAAC;EAExB;EACI,MAAMG,aAAa,GAAIX,SAAS,IAAK;IAErC,IAAIJ,KAAK,KAAK,CAAC,EAAC;MACpB;MACA;MACI,oBACEP,OAAA;QAAAuB,QAAA,GACCZ,SAAS,CAACC,KAAK,EACfD,SAAS,CAACa,OAAO,eAClBxB,OAAA;UAAOyB,QAAQ,EAAKf,CAAC,IAAKD,iBAAiB,CAACC,CAAC,CAAE;UAACgB,IAAI,EAAC,MAAM;UAACZ,KAAK,EAAIT;QAAM;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvE;IAGV,CAAC,MACI,IAAIvB,KAAK,GAAG,CAAC,EAAE;MAClB;MACAQ,aAAa,CAACJ,SAAS,CAACC,KAAK,CAAC;MAE9B,oBACEZ,OAAA;QAAAuB,QAAA,GACGZ,SAAS,CAACC,KAAK,EACfD,SAAS,CAACa,OAAO,eAClBxB,OAAA;UAAQ+B,OAAO,EAAIhB,aAAc;UAAAQ,QAAA,EAAC;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC5C;IAER;IACA;;IAEA;IACJ;EAEE,CAAC;EACD;EACA;;EAEA;;EAEA,oBACE9B,OAAA;IAAAuB,QAAA,EACGnB,WAAW,CAAC4B,GAAG,CAAEC,SAAS,iBACzBjC,OAAA;MAAAuB,QAAA,eACEvB,OAAA,CAACsB,aAAa;QAACX,SAAS,EAAIsB;MAAU;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG,GADjCG,SAAS,CAACC,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAIvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAC3B,EAAA,CApEQF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAsErB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}