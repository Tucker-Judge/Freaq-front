{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\n  const [input, setInput] = useState();\n  let count = 0;\n  function GameComponent(flashcard) {\n    if (count = 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      function inputValueChanged(e) {\n        setInput(e.target.value);\n        if (input === flashcard.front) {\n          return count + 1;\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this);\n    } else if (count = 1) {\n      // I want to have the card front displayed and it will be spoken to the user\n      // hear it repeated then move on\n      function textSynthesis() {\n        const synth = window.speechSynthesis;\n        const utterance = new SpeechSynthesisUtterance(flashcard.front);\n        synth.speak(utterance);\n      }\n      textSynthesis();\n\n      //^ to be in useEffect\n      // if clicked reset the timer\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textSynthesis,\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this);\n    } else if (count = 2) {\n      // Speech recognition of flashcard.front\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedSet.map(flashCard => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: flashCard.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: flashCard.flashcard.front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: flashCard.flashcard.one_back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, flashCard.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"+E2veEehVihf73G+Rv7Nq0ryIOw=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","GameComponent","flashcard","inputValueChanged","e","target","value","front","children","oneback","onChange","type","fileName","_jsxFileName","lineNumber","columnNumber","textSynthesis","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","onClick","map","flashCard","title","one_back","id","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["import React from 'react';\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\nconst [input, setInput] = useState()\nlet count = 0\n  function GameComponent(flashcard) {\n    if (count = 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n      function inputValueChanged(e){\n        setInput(e.target.value)\n        if (input === flashcard.front) {\n          return count + 1\n        }\n      }\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.oneback}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input}/>\n      </div>\n    )\n    \n  }\n  else if (count = 1) {\n    // I want to have the card front displayed and it will be spoken to the user\n    // hear it repeated then move on\n    function textSynthesis(){\n      const synth = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(flashcard.front);\n      synth.speak(utterance);\n      \n    }\ntextSynthesis()\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n    return (\n      <div>\n        {flashcard.front}\n        {flashcard.oneback}\n        <button onClick = {textSynthesis}>Again</button>\n      </div>\n    )\n  }\n  else if (count = 2) {\n    // Speech recognition of flashcard.front\n  }\n}\n  return (\n    <div>\n      {selectedSet.map((flashCard) => (\n        <div key={flashCard.id}>\n          <h2>{flashCard.title}</h2>\n          <p>{flashCard.flashcard.front}</p>\n          <p>{flashCard.flashcard.one_back}</p>\n          {/* Add more elements to render additional data */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FlashcardSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}