{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet,\n    languageApp\n  } = _ref;\n  if (!selectedSet) {}\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [timerStart, setTimerStart] = useState(10);\n  const [timerEnd, setTimerEnd] = useState(0);\n\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n  // input value will set count +1 if correct\n\n  function inputValueChanged(e) {\n    e.preventDefault();\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  useEffect(() => {\n    if (count === 1) {\n      textSynthesis();\n    }\n    if (count === 2) {}\n  });\n  // text synthesis function\n  function textSynthesis() {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n    utterance.lang = languageApp;\n    utterance.addEventListener(\"end\", () => {\n      synth.cancel();\n    });\n    // Add event listener to stop speaking after one pass\n\n    let interval;\n    if (timerStart > 0) {\n      console.log(\"timerStart\");\n      interval = setInterval(() => {\n        setTimerStart(timerStart - 1);\n        if (timerStart === 0) {\n          clearInterval(interval);\n          setCount(count + 1);\n        } else if (timerStart === 2 || timerStart === 7) {\n          synth.speak(utterance);\n        }\n      }, 1000);\n    }\n  }\n  // textSynthesis()\n  // let interval\n  // function startTimer() {\n  //   console.log(\"funky\")\n  //    interval = setInterval(() => {\n  //     setTimerStart(timerStart - 1);\n  //    if (timerStart === 0) {\n  //       setTimerStart(10)\n  //       setTimerEnd(timerEnd + 1)\n  //     }\n  //     else if (timerStart === 2) {\n  //       textSynthesis();\n  //     }\n  //     else if (timerStart === 7) {\n  //       textSynthesis();\n  //     } \n  //   }, 1000);\n  // }\n\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.one_back, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e),\n          type: \"text\",\n          value: input,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this);\n    } else if (count === 1) {\n      textSynthesis();\n      // if speaking then do nothing\n      // if parameter is passed then run only the last timer that does not repeat\n      // I want to have the card front displayed and it will be spoken to the user\n      // after half a second run the code\n      //  const interval = setInterval(() => {\n      //   setTimerStart(timerStart - 1)\n\n      //     if (timerStart === 3) {\n      //      textSynthesis()\n      //     }\n      //     else if(timerStart === 0){\n      //      textSynthesis()\n      //     }\n      //     if(timerStart === 0){\n      //       clearInterval(interval)\n      //     }\n      //     }, 1000);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: flashcard.one_back\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this);\n    }\n\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: selectedSet[index].flashcard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 3\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"KG921XKgh47grFGbHJOAd/c/xns=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","languageApp","input","setInput","count","setCount","index","setIndex","timerStart","setTimerStart","timerEnd","setTimerEnd","inputValueChanged","e","preventDefault","target","value","flashcard","front","textSynthesis","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","lang","addEventListener","cancel","interval","console","log","setInterval","clearInterval","speak","GameComponent","_ref2","children","one_back","onChange","type","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState, useEffect} from 'react'\n\nfunction FlashcardSet({ selectedSet, languageApp }) {\n  if(!selectedSet){\n    \n  }\n  const [input, setInput] = useState(\"\")\n  const [count, setCount] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [timerStart, setTimerStart] = useState(10)\n  const [timerEnd, setTimerEnd] = useState(0)\n\n  // const [timer3, setTimer3] = useState([])\n  // function will be called on each card\n// input value will set count +1 if correct\n\n\n  function inputValueChanged(e) {\n    e.preventDefault()\n    if (e.target.value === selectedSet[index].flashcard.front) {\n      setCount(count + 1);\n      setInput('');\n    } else {\n      setInput(e.target.value);\n    }\n  }\n  useEffect(() => {\n    if (count === 1) {\n      textSynthesis()\n    }\n    if (count === 2) {\n\n    }\n  },)\n// text synthesis function\nfunction textSynthesis() {\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(selectedSet[index].flashcard.front);\n  utterance.lang = languageApp\n  utterance.addEventListener(\"end\", () => {\n    synth.cancel();\n  });\n  // Add event listener to stop speaking after one pass\n\n  let interval\n  if (timerStart > 0){\n    console.log(\"timerStart\")\n    interval = setInterval(() => {\n      setTimerStart(timerStart - 1);\n     if (timerStart === 0) {\n        clearInterval(interval);\n        setCount(count + 1)\n      }\n      else if (timerStart === 2 || timerStart === 7) {\n        synth.speak(utterance);\n      }\n    }, 1000);\n  }\n}\n// textSynthesis()\n// let interval\n// function startTimer() {\n//   console.log(\"funky\")\n//    interval = setInterval(() => {\n//     setTimerStart(timerStart - 1);\n//    if (timerStart === 0) {\n//       setTimerStart(10)\n//       setTimerEnd(timerEnd + 1)\n//     }\n//     else if (timerStart === 2) {\n//       textSynthesis();\n//     }\n//     else if (timerStart === 7) {\n//       textSynthesis();\n//     } \n//   }, 1000);\n// }\n\n\n  \n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.one_back}\n      <input onChange = {(e) => inputValueChanged(e)} type=\"text\" value = {input} autoFocus/>\n      </div>\n    )\n    \n  }\n  else if (count === 1) {\n    textSynthesis()\n    // if speaking then do nothing\n    // if parameter is passed then run only the last timer that does not repeat\n    // I want to have the card front displayed and it will be spoken to the user\n    // after half a second run the code\n  //  const interval = setInterval(() => {\n  //   setTimerStart(timerStart - 1)\n\n  //     if (timerStart === 3) {\n  //      textSynthesis()\n  //     }\n  //     else if(timerStart === 0){\n  //      textSynthesis()\n  //     }\n  //     if(timerStart === 0){\n  //       clearInterval(interval)\n  //     }\n  //     }, 1000);\n    return (\n      <div>\n        <p>{flashcard.front}</p>\n        <p>{flashcard.one_back}</p>\n        {/* <button onClick={() => textSynthesis(flashcard.front)}>Again</button> */}\n      </div>\n    );\n  }\n  \n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n           \n  <div key={index}>\n{ <GameComponent flashcard = {selectedSet[index].flashcard}/>}\n \n  </div>\n\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}