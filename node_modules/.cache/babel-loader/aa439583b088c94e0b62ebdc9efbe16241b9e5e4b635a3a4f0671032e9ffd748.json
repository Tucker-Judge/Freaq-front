{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  var _s = $RefreshSig$();\n  let {\n    selectedSet\n  } = _ref;\n  console.log(selectedSet);\n  const GameComponent = _ref2 => {\n    _s();\n    let {\n      flashcard\n    } = _ref2;\n    // map through each card\n    // function in map taking in card\n\n    // function will be called on each card\n    const [input, setInput] = useState(\"\");\n    const [count, setCount] = useState(0);\n    function inputValueChanged(e, flashcard) {\n      if (input === flashcard) {\n        return setCount(count + 1);\n      }\n      console.log();\n      setInput(e.target.value);\n    }\n    function textSynthesis(flashcardfront) {\n      const synth = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(flashcardfront);\n      synth.speak(utterance);\n      console.log(utterance);\n    }\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e, flashcard.front),\n          type: \"text\",\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this);\n    } else if (count = 1) {\n      // I want to have the card front displayed and it will be spoken to the user\n      textSynthesis(flashcard.front);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textSynthesis(flashcard.front),\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this);\n    }\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n  _s(GameComponent, \"Mk423h3OarbyGSPk7xyQ8Z2ZryE=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Array.isArray(selectedSet) && selectedSet.map(high => {\n      high.map(flashCard => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GameComponent, {\n            flashcard: flashCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)\n        }, flashCard.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this);\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","$RefreshSig$","selectedSet","console","log","GameComponent","_ref2","flashcard","input","setInput","count","setCount","inputValueChanged","e","target","value","textSynthesis","flashcardfront","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","children","front","oneback","onChange","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Array","isArray","map","high","flashCard","id","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  console.log(selectedSet)\n  const GameComponent = ({flashcard}) => {\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\nconst [input, setInput] = useState(\"\")\nconst [count, setCount] = useState(0)\n\nfunction inputValueChanged(e, flashcard){\n  if (input === flashcard) {\n    return setCount(count + 1)\n  }\n  console.log()\n  setInput(e.target.value)\n}\n\nfunction textSynthesis(flashcardfront){\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(flashcardfront);\n  synth.speak(utterance);\n  console.log(utterance)\n  \n}\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.oneback}\n      <input onChange = {(e) => inputValueChanged(e, flashcard.front)} type=\"text\" value = {input}/>\n      </div>\n    )\n    \n  }\n  else if (count = 1) {\n    // I want to have the card front displayed and it will be spoken to the user\n    textSynthesis(flashcard.front)\n    \n    return (\n      <div>\n        {flashcard.front}\n        {flashcard.oneback}\n        <button onClick = {textSynthesis(flashcard.front)}>Again</button>\n      </div>\n    )\n    }\n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n      {Array.isArray(selectedSet) && selectedSet.map((high) => {\n        high.map((flashCard) => {\n            return (\n\n              <div key={flashCard.id}>\n          <GameComponent flashcard = {flashCard}/>\n          {/* Add more elements to render additional data */}\n        </div>\n            )\n        })\n})}\n    </div>\n  );\n  \n}\n\nexport default FlashcardSet;\n\n"],"mappings":";AACA,SAAQA,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,YAAYA,CAAAC,IAAA,EAAkB;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAH,IAAA;EACnCI,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;EACxB,MAAMG,aAAa,GAAGC,KAAA,IAAiB;IAAAN,EAAA;IAAA,IAAhB;MAACO;IAAS,CAAC,GAAAD,KAAA;IAClC;IACA;;IAEA;IACF,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;IACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;IAErC,SAASiB,iBAAiBA,CAACC,CAAC,EAAEN,SAAS,EAAC;MACtC,IAAIC,KAAK,KAAKD,SAAS,EAAE;QACvB,OAAOI,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MAC5B;MACAP,OAAO,CAACC,GAAG,EAAE;MACbK,QAAQ,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC1B;IAEA,SAASC,aAAaA,CAACC,cAAc,EAAC;MACpC,MAAMC,KAAK,GAAGC,MAAM,CAACC,eAAe;MACpC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACL,cAAc,CAAC;MAC9DC,KAAK,CAACK,KAAK,CAACF,SAAS,CAAC;MACtBlB,OAAO,CAACC,GAAG,CAACiB,SAAS,CAAC;IAExB;IAEI,IAAIX,KAAK,KAAK,CAAC,EAAC;MACpB;MACA;MACI,oBACEb,OAAA;QAAA2B,QAAA,GACCjB,SAAS,CAACkB,KAAK,EACflB,SAAS,CAACmB,OAAO,eAClB7B,OAAA;UAAO8B,QAAQ,EAAKd,CAAC,IAAKD,iBAAiB,CAACC,CAAC,EAAEN,SAAS,CAACkB,KAAK,CAAE;UAACG,IAAI,EAAC,MAAM;UAACb,KAAK,EAAIP;QAAM;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxF;IAGV,CAAC,MACI,IAAItB,KAAK,GAAG,CAAC,EAAE;MAClB;MACAM,aAAa,CAACT,SAAS,CAACkB,KAAK,CAAC;MAE9B,oBACE5B,OAAA;QAAA2B,QAAA,GACGjB,SAAS,CAACkB,KAAK,EACflB,SAAS,CAACmB,OAAO,eAClB7B,OAAA;UAAQoC,OAAO,EAAIjB,aAAa,CAACT,SAAS,CAACkB,KAAK,CAAE;UAAAD,QAAA,EAAC;QAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7D;IAER;IACA;;IAEA;IACJ;EAEE,CAAC;EACD;EACA;;EAEA;EAAAhC,EAAA,CAzDMK,aAAa;EA2DnB,oBACER,OAAA;IAAA2B,QAAA,EACGU,KAAK,CAACC,OAAO,CAACjC,WAAW,CAAC,IAAIA,WAAW,CAACkC,GAAG,CAAEC,IAAI,IAAK;MACvDA,IAAI,CAACD,GAAG,CAAEE,SAAS,IAAK;QACpB,oBAEEzC,OAAA;UAAA2B,QAAA,eACJ3B,OAAA,CAACQ,aAAa;YAACE,SAAS,EAAI+B;UAAU;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAE,GAD1BM,SAAS,CAACC,EAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAGtB;MAEN,CAAC,CAAC;IACV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACQ;AAGV;AAACQ,EAAA,GA7EQ1C,YAAY;AA+ErB,eAAeA,YAAY;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}