{"ast":null,"code":"var _jsxFileName = \"/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardSet(_ref) {\n  _s();\n  let {\n    selectedSet\n  } = _ref;\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  function inputValueChanged(e, flashcard) {\n    let inputValue = e.target.value;\n    if (inputValue === flashcard.front) {\n      setCount(count + 1);\n    }\n    setInput(inputValue);\n  }\n  function textSynthesis(flashcardfront) {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(flashcardfront);\n    synth.speak(utterance);\n    console.log(utterance);\n  }\n  const GameComponent = _ref2 => {\n    let {\n      flashcard\n    } = _ref2;\n    if (count === 0) {\n      // i want to have the card displayed and it must be typed correctly to move on\n      // with accent keyboard below the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => inputValueChanged(e, flashcard.front),\n          type: \"text\",\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this);\n    } else if (count = 1) {\n      // I want to have the card front displayed and it will be spoken to the user\n      textSynthesis(flashcard.front);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [flashcard.front, flashcard.oneback, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => textSynthesis(flashcard.front),\n          children: \"Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this);\n    }\n    // hear it repeated then move on\n\n    //^ to be in useEffect\n    // if clicked reset the timer\n  };\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedSet.map(flashCard => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameComponent, {\n        flashcard: flashCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, flashCard.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardSet, \"Mk423h3OarbyGSPk7xyQ8Z2ZryE=\");\n_c = FlashcardSet;\nexport default FlashcardSet;\nvar _c;\n$RefreshReg$(_c, \"FlashcardSet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","FlashcardSet","_ref","_s","selectedSet","input","setInput","count","setCount","inputValueChanged","e","flashcard","inputValue","target","value","front","textSynthesis","flashcardfront","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","console","log","GameComponent","_ref2","children","oneback","onChange","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","flashCard","id","_c","$RefreshReg$"],"sources":["/Users/tudge/Development/phase-5/freaq-front-git/src/Components/FlashcardSet.js"],"sourcesContent":["\nimport {useState} from 'react'\n\nfunction FlashcardSet({ selectedSet }) {\n  // map through each card\n  // function in map taking in card\n\n  // function will be called on each card\nconst [input, setInput] = useState(\"\")\nconst [count, setCount] = useState(0)\n\nfunction inputValueChanged(e, flashcard){\n  let inputValue = e.target.value\n  if (inputValue === flashcard.front) {\n    setCount(count + 1)\n  }\n  setInput(inputValue)\n}\n\n\nfunction textSynthesis(flashcardfront){\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(flashcardfront);\n  synth.speak(utterance);\n  console.log(utterance)\n  \n}\n    const GameComponent = ({flashcard}) => {\n   \n    if (count === 0){\n// i want to have the card displayed and it must be typed correctly to move on\n// with accent keyboard below the game\n    return (\n      <div>\n      {flashcard.front}\n      {flashcard.oneback}\n      <input onChange = {(e) => inputValueChanged(e, flashcard.front)} type=\"text\" value = {input}/>\n      </div>\n    )\n    \n  }\n  else if (count = 1) {\n    // I want to have the card front displayed and it will be spoken to the user\n    textSynthesis(flashcard.front)\n    \n    return (\n      <div>\n        {flashcard.front}\n        {flashcard.oneback}\n        <button onClick = {() => textSynthesis(flashcard.front)}>Again</button>\n      </div>\n    )\n    }\n    // hear it repeated then move on\n    \n    //^ to be in useEffect\n// if clicked reset the timer\n\n  }\n  // else if (count = 2) {\n  //   // Speech recognition of flashcard.front\n\n  // }\n\n  return (\n    <div>\n      {selectedSet.map((flashCard) => (\n        <div key={flashCard.id}>\n          <GameComponent flashcard = {flashCard} />\n          {/* Add more elements to render additional data */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FlashcardSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}